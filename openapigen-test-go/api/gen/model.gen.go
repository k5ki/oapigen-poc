// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// User defines model for user.
type User struct {
	// CreatedAt CreatedAt
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id User ID
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name User name
	Name *string `json:"name,omitempty"`

	// UpdatedAt UpdatedAt
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = User

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xTTW8TMRD9K9HAcTfr/Uia+MaHVAUOXOgBUIWc9SRxlbVdexwRRfvfkZ2PpjQRQgKJ",
	"vaw9Hr838+Z5B63prNGoyQPfgW9X2Im0DB5d/FtnLDpSmKKtQ0EovwuKO4m+dcqSMho4vNufvSHIAH+I",
	"zq4ROFSsGuWszFn1mdWcNZyNhuObyZSVVd18hQwWxnURDqQgzEl1CBnQ1sbLnpzSS+gzUPIl4Z1HN5i9",
	"f0ZXVjU2o/FNjpPpPC8rWeeiGY3zphqPy6a8aRhj56QhKHmJT4sOrzCmo3POD6J9DDj4Ei5WHqy8Ktnd",
	"/uxfSNafImb+gC1BH0NKL8zLMnCj9HJlgk84ilIVC2PmwkEGG3R+n1cOWezIWNTCKuBQD9mwhgysoFXy",
	"RyGsKjZlEd2TAtb4C32L4wcJzYkYn8mTiaLOkIHDx4Ce3hq5TeYzmlAnOGHtWrXpWvHgI+bRvHH12uEC",
	"OLwqntxdHKydKota9BHeW6P93tkVY3+dI/ul7U8f01x86DrhtqduB4f87Ll8xS7+ZrKPdEv8IxlvkQ4a",
	"WuFEh5TG8e36C1JxG8cIR+/Dnv0wBuVQAicXMDsT4TfPqL//H0S+RRo8JXt0m6MYwa2Bw4rI8qJYm1as",
	"V8YTn7DJFPr7/mcAAAD//1/o0tgeBQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
