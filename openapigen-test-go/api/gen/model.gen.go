// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// User defines model for user.
type User struct {
	// CreatedAt CreatedAt
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id User ID
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name User name
	Name *string `json:"name,omitempty"`

	// UpdatedAt UpdatedAt
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RTzW7bPBB8FWO/7yhZ1I//eCtaoHB76KU5tEVQ0NLaZmCRzHJpNDD07gWpuHEQGz1V",
	"F4q75M7scPYEre2dNWjYgzyBb/fYq/QbPFJcHVmHxBpTtCVUjN1PxXHXoW9JO9bWgIT3Y+4dQwb4S/Xu",
	"gCChEtUsF2Uuqq+ilqKRYjadL5YrUVZ18x0y2FrqYznoFGPOukfIgJ9cvOyZtNnBkIHu3gLeeaTJ+sMr",
	"uLKqsZnNFzkuV5u8rLo6V81snjfVfF425aIRQlyChqC7a3hG9XgDMaUuMT+p9jHg5Fu4yjy47qZkd2Pu",
	"X0g2/InYzQO2DEMMabO1b2ngUZvd3gaf6mhOLLbWbhRBBkckP54rpyJ2ZB0a5TRIqKdiWkMGTvE++aNQ",
	"ThfHsoju8cUpLutuiJkdXulfnT9IVUnF+LoDCR+Ro9ipNqkeGcmD/HHbAjpuIw84Px6M6JAB4WPQhB1I",
	"poDZs80jnb/4YLiPl72zxo/+r4RIY2ANo0kNKecOuk3EiwcfSZ0u6v9PuAUJ/xUvc1Y8D1nSaHyV1z19",
	"+Zxez4e+V/Q0ajF5OeyRjmcxAh1Awp7ZyaI42FYd9tazXIrlCob74XcAAAD//woCc/XfAwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
